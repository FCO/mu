    '[P]lan to throw one away; you will, anyhow'
        -- Frederick Brooks, 'The Mythical Man-Month'

    'What's the simplest thing that could possibly work?'
        -- Ward Cunningham

This file contains a plan for the prototype of u4x. Using the lessons from
this prototype, we'll then develop the full-fledged version.

Below are listed one thing to document from each "category" of things, along
with rationale within parentheses. If you think you have a better example,
feel free to add it.

== A base class

Pair (fairly stable, not too large, a few different use cases)

== A method

.pick (fun, and krunen++ already contributed a nice example of it)

my %cards = <ace two three four five six seven eight nine ten jack queen king>
            X~ (" of " X~ <spades hearts diamonds clubs>)
            Z (1|11,2..13 X* 1,1,1,1);
%cards.pick(5).perl.say

== Predeclared constants

False (What else? No, actually, True and False should probably go on the
same page.)

== Ambient subs

slurp (Stable; not too involved.)

== No longer subs/methods

length (Really common pitfall. Many refs to other docu pages.)

== Control flow and statement prefixes

if (Simply yet requiring good explanations. Will also involve other things
like junctions and the proper handling of those.)

== Declaration keywords

subset (Smallish. Interesting.)

== Terms

continue (Stable; useful. Not too complicated.)

== Special block types

LAST (Probably won't change much in the future.)

== Obsolete magical variables

$. (Has a stable replacement. Can do external refs.)

== Twigils

^ (Connects to blocks and params and other things.)

== Base prefixes

0x (Hex rocks.)

== Quote operators

qq: (Stable enough. Involved enough.)

== Prefix/postfix ops

-- (Because of the special case with strings.)

== Infix operators

ff (Because Stevey complained about the corresponding Perl 5 documentation,
calling it insane. We can do better, and then we'll blog about it.)

== Expression terminators

; (We can talk about how they're not really needed after line-ending blocks.)

== Grammar/regex builtin rules

digit (Fun to talk about unicode digits.)

== Special Perl and Perl 6 terms

lvalue (Right level of complexity to explain.)
