Ideas that are already written up, or planned as a topic in the 'schedule' file
 – about the Perl 6 Itself: specification, not an implementation, this is Rakudo, this is Niecza, this is Parrot
 – file mangling: dir(), open(), close()
 – MAIN and USAGE subs
 – sequence operator (but can be continued/extended)
 – Z and X meta operators
 – The Perl 6 community
 - writing modules--what tools to use; where to find them.
 – basic parsing: what is a term, what is an operator? why is the distinction important?
 - flip (Str), reverse (List), and invert (Hash), and why they were split in three
 – module system
 – smart matching
 – MOP

 Tadzik's ideas:
 – compiler hacking
 – traits (sub foo is something(blah blah) {})
 – reference of types and its methods (something about gradual typing as well, or in another post?)
 – The Perl 6 Way (we tend to use lazy lists quite often, in example)

Moritz's ideas:
 – explaining one or more Perl 6 solutions on rosettacode
 – lexical subs and importing/exporting (moritz)
 – is everything a reference?
 – infrastructure (what editors/IDEs are good for Perl 6 hacking/have syntax hilighting, tools used for hacking and presentations etc.)

 p6-users@ ideas:
 – sorear's fibers, laziness
 – new way to do IO
 – A natural language data/time parser could show off grammars.

sorear's ideas:
 – Beautiful secrets of the regex engine
 – What is flattening-ness?
 – gather and coroutines are equal in power
 – Binding and ties
 – Cool new feature: Builtin functions
 
colomon's ideas:
 - Feel very strongly we need a "How to get Rakudo * post" first (maybe combined with an update on the state of the p6 world)
 - Christmas carol notation using the ABC module
 
PerlJam's ideas:
    - I think each advent should start off with a post on the State of
      the Perl 6 World  (State of the Butterfly?) and at the end a small
      section on how to obtain implementations of Perl 6
    - How to debug grammars
    - Tour of the minor syntax variability from Perl 5
    - Overview of Rakudo Star  (what is it, what comes with it,
      why?  etc)
    - Overview of some of the modules from Rakudo Star (with examples)
    - Using zavolaj


lue's ideas:
 – S32::Temporal
 – Phasers
 – (Possibly) Common problems with grammars [e.g. *,+,? are greedy by default, and other semi-common foibles. Maybe combine with other grammar related ideas?]

masak's ideas:
 - multi subs and methods -- how the spec puts user-defined ones on equal footing with built-in ones
 - take a rosetta code solution in some *other* language, rewrite it faithfully in Perl 6, and then show how to make it shorter/awesomer/more readable. attempted moral: Perl 6 supports many styles, and (as opposed to Perl 5) things tend to get more readable when you golf.
 - roles, role conflicts, and disambiguators (DrunkenGymnast!)
