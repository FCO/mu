elfparse - getting STD.pm running on elf.

QUICKSTART

First, get <pugs>/misc/STD_red working.  See its README.

$ sudo cpan -i autobox Class::Multimethods Sub::Name  Regexp::Common
$ sudo cpan -i Moose Term::ANSIColor  #...others...?
$ make known_working_STD
$ make elfblue
$ ./elfblue -v -s -e 'say 3'
$ make check
$ make all
$ ./elfrx -v -e 'proto token foo {a}; token foo:<+> { \+ }; token foo:<++> { \+\+ }; say /<foo>/.match("a++b").match_describe'
$ make is_perl_recent_enough
$ ./elfdev -v -e 'say /<STD::number>/.match("23").match_describe'

$ make does_gimme5_memory_problem_still_exist

INTRODUCTION

Parser
------

Elf currently uses an external parser, of which there are several.

STD_red
The fast and stable parser used by elf_h.
It is handwritten ruby1.9, based on a rather old STD.pm.
<pugs>/misc/STD_red/

STD_blue
The reference and bootstrap parser used by elfblue and elfrx.
It uses Larry's Perl 5 src/perl6/gimme5 STD.pmc.
Its parse tree is different than STD_red's (thus ./IRx1_FromAST2.pm),
and closer to what elf will have when it can run STD.pm directly.
STD_blue/elfblue works well enough to self-compile elfblue.

STD_green
The development parser.
It uses std.pm (a tweaked STD.pm) on elfrx (elfblue plus rx engine).
Its parse tree is similar to STD_blue's (so elfblue and elfrx may use it).
It can't parse even "3" yet.  

Compiler
--------

There are several versions of elf.

elf_h is the foundational elf.  It uses STD_red.

elfblue is a (tweaked) elf_h which uses STD_blue instead of STD_red.
Purpose: keep STD_blue elf working.

elfrx is like elfblue, but also has regex support.
Purpose: regex development.

elfdev is elfrx with std.pm preloaded.
Purpose: std.pm debugging.


VISION

Teach elfrx to to compile and run STD.pm.
Thus permitting the front-end to be bootstrapped.


NOTES

Dependencies:
autobox Class::Multimethods Sub::Name #elf
Regexp::Common #rx_on_re
Moose #gimme5

gimme5, and thus STD_blue, is not quite ready to replace STD_red as
the primary elf parser.
 Speed has greatly improved - is it comparable yet?
 Memory usage on encountering foofix:<bar> decls is a non-starter?
  (but... could :sym<>-ify elf?).
 elf IRFromAST2 support for STD_blue's AST needs work.
 If running STD.pm using rx_on_re in elf works out, then switching isn't
  critical path.  But if it bogs down, that may change..

PrimitivesP5.pm is a tweaked copy of elf_h's - gimme5 takes more memory
than I have available to compile the original.

IRx1_FromAST2_create.pl is a mess, with an unfortunate quantity of broken
legacy code.  The only objective was "get to self compilation", so general
p6 support is lacking, even by elf standards.


make check  runtime:
r24098 takes me 9m35s'user (with STD_red cached, and STD_blue not cached).

Success looks like:
- STD_blue can parse STD.pm.
- elfblue can generate IR for STD.pm.
- an elf can run the non-rx portions of STD.pm.
- rx_on_re can run the rx portions of STD.pm.
- rx_on_re is integrated into an elf.
- an elf can run STD.pm
- an elf can self-compile using STD.pm.

