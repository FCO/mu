using System.Text;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections.Generic;
using System.Drawing;
using System.Collections.Processing;
using System.Extensions;
using System.Linq;

namespace System.Windows.Cli
{
    /// <summary>
    /// Represent named console command
    /// </summary>
    [ToolboxItemFilter("Command Line Interface", ToolboxItemFilterType.Require)]
    [DisplayName("Ordered Command")]
    [Description("Ordered Command")]
    [DesignTimeVisible(true)]
    public class NamedCommand : Component, ICommand
    {
        private int m_paramCount;

        public NamedCommand()
            : this(null)
        {
        }

        /// <summary>
        /// Create instance of the current command at design-time
        /// </summary>
        /// <param name="container"></param>
        public NamedCommand(IContainer container)
        {
            if (container.IsNotNull())
                container.Add(this);
        }

        #region ICommand Members

        bool ICommand.Ordered
        {
            get { return false; }
        }

        int ICommand.Position
        {
            get { throw new NotSupportedException(); }
        }

        /// <summary>
        /// Get or set position of the command
        /// </summary>
        [Browsable(true)]
        [Description("Get or set position of the command")]
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// Get or set unqiue command identifier
        /// </summary>
        [Browsable(true)]
        [Description("Get or set unqiue command identifier, for example: '/t'")]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Get or set count of command parameters
        /// </summary>
        [Browsable(true)]
        [Description("Get or set count of command parameters")]
        public int ParamCount
        {
            get { return m_paramCount; }
            set
            {
                if (m_paramCount < 0) return;
                m_paramCount = value;
            }
        }

        #endregion

        #region IPattern<char,ICommandParsingResult> Members

        ICommandParsingResult IPattern<char,ICommandParsingResult>.Match(INavigationContext<char> navigator)
        {
            ExceptionManager.CheckOnNull(navigator, "navigator");
            var commandName = ParseCommandName(navigator);
            DeleteSpaces(navigator);
            var commands = ParseCommands(navigator).ToArray();
            if (commands.Length != ParamCount) return null;
            return new CommandParsingResult(commandName, commands);
        }

        public event EventHandler<MatchedEventArgs<ICommandParsingResult>> Matched;

        #endregion

        private string ParseCommandName(INavigationContext<char> navigator)
        {
            var lexeme = new Lexeme(Id);
            return lexeme.Match(navigator);
        }

        private IEnumerable<string> ParseCommands(INavigationContext<char> navigator)
        {
            var result = default(string);
            //Create counter for commands
            var counter = 0;
            while ((result = ParseCommand(navigator)).IsNotNull() && counter < ParamCount)
                if (result.IsNull()) yield break;
                else
                {
                    yield return result;
                    counter++;
                }
        }

        //
        //Delete spaces from the current character sequence
        //
        private static void DeleteSpaces(INavigationContext<char> navigator)
        {
            var currentPos = navigator.CurrentPosition;
            while (currentPos != null)
            {
                var character = navigator.GetValueAtMarker(currentPos);
                if (character != ' ') break;
                currentPos = navigator.MoveNext();
            }
        }

        private string ParseCommand(INavigationContext<char> navigator)
        {
            var result = new StringBuilder();
            var currentPos = navigator.CurrentPosition;
            while (currentPos != null)
            {
                var character = navigator.GetValueAtMarker(currentPos);
                switch (character)
                {
                    case '"':
                        return ParseSpacedCommand(navigator);
                    case ' ':
                        return result.Length.IsZero() ? null : result.ToString();
                    default: result.Append(character); break;
                }
                currentPos = navigator.MoveNext();
            }
            return result.Length.IsZero() ?
                   null : result.ToString();
        }

        private string ParseSpacedCommand(INavigationContext<char> navigator)
        {
            var currentPos = navigator.MoveNext();  //Pass the " character
            var result = new StringBuilder();
            while (currentPos != null)
            {
                var character = navigator.GetValueAtMarker(currentPos);
                if (character == '"')
                    if (character == '"')
                    {
                        navigator.MoveNext();   //Pass " character
                        break;
                    }
                result.Append(character);
                currentPos = navigator.MoveNext();
            }
            return result.ToString();
        }

        private CommandParsingResult OnMatched(string result)
        {
            var cmdResult = new CommandParsingResult("", result.AsArray());
            if (Matched.IsNotNull())
                Matched(this, new MatchedEventArgs<ICommandParsingResult>(cmdResult));
            return cmdResult;
        }
    }
}
