#!/usr/bin/perl
# a rewrite of the mildew script using Bread::Board
use Bread::Board;
use File::Slurp qw(slurp);
use Getopt::Long;
use Encode;
use lib 'src';
use utf8;

# print the help message
sub help {
print <<'HELP';
Usage: mildew [switches] [--] [programfile] [arguments]
  -B<backend>     execute using the <backend> backend
  -C<backend>     compile using the <backend> backend
                  (valid backends are: via-C)
  -P<parser>      parse using the <parser> parser
                  (valid parsers are: STD,STD-cached)
  -e
  -o <file>       Place the output into <file>
HELP
exit;
}

# make sure we use utf8 
binmode STDOUT, ':utf8';
binmode STDIN, ':utf8';

# get command line options
my ($C,$B,$P,$help,$e,$output);
Getopt::Long::Parser->new( config => [qw( bundling no_ignore_case pass_through require_order)], )->getoptions(
    "C=s" => \$C,
    "B=s" => \$B,
    "P=s" => \$P,
    'h|help' => \$help,
    'e=s' => \$e,
    'o=s' => \$output
) || help;
help if $help;


my $source;
if ($e) {
    $source = Encode::decode_utf8($e);
} elsif ($ARGV[0]) {
    $source = Encode::decode_utf8(slurp($ARGV[0]));
} else {
    $source = join('', <STDIN>);
}

if ($C and $B) {
    die "You can't specify both -C and -B.\n";
} elsif (!$C and !$B) {
    if ($output) {
        $C = 'via-C';
    } else {
        $B = 'via-C';
    }
}

$P //= 'STD';

my %parsers = (
    "STD"   => 'Mildew::Parser::STD',
    "STD-cached" => 'Mildew::Parser::STD::Cached',
);

my %backends = (
    "via-C"   => 'Mildew::Backend::C::M0ld',
    "optC"   => 'Mildew::Backend::OptC',
    "desugar" => 'Mildew::Backend::Desugar',
    "perlesque" => 'Mildew::Backend::Perlesque',
);

if ($C and !$backends{$C}) {
    die "Unknown backend $C passed to -C.";
} elsif ($B and !$backends{$B}) {
    die "Unknown backend $B passed to -B.";
}
unless ($parsers{$P}) {
    die "Unknown parser $P passed to -P.";
}

my $c = container 'Mildew' => as {
    service 'backend'  => (class => $backends{$C // $B});
    service 'parser'  => (class => $parsers{$P});
    service 'compiler' => (class => 'Mildew::Compiler',dependencies=>{backend=>depends_on('backend'),parser=>depends_on('parser')});
};

if ($C) {
    $c->fetch('compiler')->get->compile($source,$output);
} elsif ($B) {
    $c->fetch('compiler')->get->run($source);
}
