From a blog post:

The official goal of the Userdocs For Christmas project (U4X) shall be to
provide easy-to-access comprehensive user documentation, through a ridiculously
easy-to-access command line tool, providing snippets of Perl 6 clarification so
perfectly worded and so brilliantly illustrative that the unsuspecting reader
will be brought close to tears. The inofficial goals are to be so desirable for
implementations that they will want to ship with the documentation, and to be
so useful for the Perl 6 community that these docs will be considered the
'official' Perl 6 documentation, something like the new perldoc.

The documentation writing will be done in a controlled manner, where
"controlled" means that people with tuits get to make sure that things are
consistent. All the documentation will be written in Pod, the Perl 6 version
of POD.

The command line tool (named 'psi') should be written in Perl 6, because
there's no reason not to.

Here are the things that should give appropriate responses by psi:

* all core Perl 6 classes
* all of their methods (with or without a class prefix)
* all subs in the MAIN namespace
* operators (short form '-' or full form 'infix:<->')
* metaoperators (see below)
* macros, like .WHAT and .HOW
* special forms, like 'will', which kinda look like operators
* keywords in general, everything from 'given' to 'enum'
* special variables (like $*IN and $?ROUTINE)
* pseudo-package names (MY, GLOBAL etc)
* special Perl 6 or scripting terms, like 'slurpy' or 'autovivify'

psi will be accomodating and understand the basics of Perl 6 syntax. When the
following things are requested

  @array>>.trim
  .=abs
  [+]

psi will understand that the user is actually asking two separate questions in
each case, and will answer both:

  the '>>' operator (as applied to method calls), trim
  the '.=' metaoperator, abs
  the '[]' metaoperator, '+'
