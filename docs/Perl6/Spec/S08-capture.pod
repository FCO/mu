
=encoding utf8

=head1 TITLE

Synopsis 8: Capture and Parcel

=head1 AUTHORS

    Daniel Ruoso <daniel@ruoso.com>

=head1 VERSION

    Created: 20 Sep 2009

    Last Modified: 20 Sep 2009
    Version: 1

=head1 Introduction

Unlike most programming languages, the data structure that is used to
send the parameters into a routine invocation (be it a method or a
sub) is exposed to the language as a built-in type like any
other. This represents a very important aspect of the Perl 6 runtime
requirements.

Additionally to the fact that this data structure is visible in the
language type system, it is not assumed that the capture is a native
type, which means that the internal representation of the data is
subject to change. The only thing the runtime can assume is the API
described here.

Of course the runtime can cheat whenever it knows the capture is
implemented by its own internal data structure for optimization
purposes, but it should allow the use of foreign types when invoking a
routine, as long as it says true to .^does(Capture).

Captures and Parcels are also the basis for the multidimensionality of
lists in Perl 6. Unlike Perl 5, no flattening happens unless it's
explicitly required by the user, which is done by enforcing the List
context. If you use the scalar context the dimensionality should be
preserved.

In addition to the List and Scalar context, there's also a special
context, which is, in a simplified way, called "Capture context", but
it actually means "deferred context", in a way that the Capture or
Parcel is kept as-is while they are manipulated in the code. This is
usefull to avoid unwanted flattening as well as avoiding the DWIMmy
features that might change the capture's behavior.

This is the main point on why Capture and Parcel replace Perl 5
references, they allow you to send data untouched from one place to
another. The second reason is that as in Perl 6 everything is an
object, there isn't really "pass-by-value" anymore, you're always
sending a reference, Captures and Parcels simply carry other objects
without enforcing any context on them.

=head1 Capture or Parcel

While a Capture is the object that holds the parameters sent to a
routine (positional and named), a Parcel is a more fundamental data
structure that doesn't really differentiate named arguments from
positional arguments (but it still lets you access the named ones by
their name).

The basic underlying concept is that a Parcel behaves much like a
list, but it doesn't enforce any context, in a way that no flattening
or coercion is made. When you use the Positional API on a Parcel, it
will include all the listed items, no matter they look like named
arguments or positional arguments. In example:

  1, 2, :a<b>

The Parcel represented here has 3 positional items and allows you to
access the element 'a' through the Associative interface. A Parcel
might be statically converted to a Capture if it's clear to the parser
that it's being used as the arguments to a routine call.

A Capture, on the other hand, is not required to keep the positional
information for the named arguments, in example:

  foo(1,:a<b>,2)

In the call to the routine foo, there are only two positional
arguments and one named argument, and you won't be able to find "b"
from the Positional interface, but only from the Associative.

The differentiation from Parcel and Capture is important to keep the
regular use of inline declarations consistent, let's say you do the
following:

  my $a = 0, :a<b>, 2;
  say $a[2];

If we had Capture and Parcel as the same data structure, you wouldn't
get "2" as the result of the above code, because there are only two
positional arguments, not three. Using the same example:

  sub foo($p1, $p2, :$a) {...}
  foo(|$a);

In that case, the Parcel is converted into a Capture, and therefore
the pair :a<b> is no longer visible as a positional argument, only as
named.

Note that once you convert a Parcel into a Capture, you won't be able
to get the original Parcel again, because a Capture doesn't hold the
information about the position of named arguments.

=head1 Additions

Please post errors and feedback to perl6-language.  If you are making
a general laundry list, please separate messages by topic.
