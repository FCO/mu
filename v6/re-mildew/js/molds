[code_mold]
my $interpreter;
my $capture;
my $back;
my $code;
my $outer;
my $signature;
my $mold;

my $void;

my $lexical_proto = ¢SMOP__S1P__LexicalScope;
my $lexical = $lexical_proto."new"();
my $lexical_outer_container = $lexical."outer"();
$void = $lexical_outer_container."STORE"($outer);

my $actualcapture_c = $capture."positional"(1);

$void = $signature."BIND"($actualcapture_c,$lexical);

my $cc = $capture."named"("cc");
my $has_cc = $cc."true"();
if $has_cc { goto set_cc } else { goto execute };
set_cc:
 $back = $cc."FETCH"();
execute:
my $frame = $mold."create"();
$void = $frame."set_regs"($interpreter,$lexical);
$void = $frame."set_lexical"($lexical);
$void = $frame."set_back"($back);
$void = $interpreter."goto"($frame);

[pureprototypehow_dispatch_mold]
my $interpreter;
my $responder;
my $identifier;
my $capture;
my $invocant;

my $void;
my $result = ¢SMOP__NATIVE__bool_false;

my $how_c = $invocant."^!how"();
my $how = $how_c."FETCH"();

find_method:
  my $methods = $invocant."^!methods"();
  my $method_exists = $methods."exists"($identifier);

if $method_exists { goto than } else { goto fail };
than:
  my $method_container = $methods."postcircumfix:{ }"($identifier);
  my $method = $method_container."FETCH"();
  $result = $method."postcircumfix:( )"($capture);
  goto exit;
fail: noop;
  my $UNKNOWN_METHOD_exists = $methods."exists"("UNKNOWN_METHOD");
  if $UNKNOWN_METHOD_exists { goto call_UNKNOWN_METHOD } else { goto lookup_fail };
  call_UNKNOWN_METHOD: 
    my $void = $invocant."UNKNOWN_METHOD"($identifier);
    goto exit;
  lookup_fail:
    $result = $how."lookup_fail"($responder, $identifier, $capture);
exit:
my $continuation = $interpreter."continuation"();
my $back = $continuation."back"();
$void = $back."setr"($result);
$void = $interpreter."goto"($back);

[default_method_signature_BIND_mold]
my $interpreter;
my $scope;
my $capture;

# TODO make it %_ and @_
my $cont = $scope."postcircumfix:{ }"("$¿self");
my $arg = $capture."positional"(0);
my $void = $cont."BIND"($arg);

my $continuation = $interpreter."continuation"();
my $back = $continuation."back"();
my $void;
$void = $interpreter."goto"($back);
[default_block_signature_BIND_mold]
my $interpreter;
my $scope;
my $capture;

my $count = $capture."elems"();

if $count {goto then} else {goto else};

then:
    my $cont = $scope."postcircumfix:{ }"("$_");
    my $arg = $capture."positional"(0);
    my $void = $cont."BIND"($arg);
    goto exit;
else:
    # TODO
    noop;
exit:

my $continuation = $interpreter."continuation"();
my $back = $continuation."back"();
my $void;
$void = $interpreter."goto"($back);
[throw_mold]
my $interpreter;
my $invocant;
my $capture;
my $stack = $interpreter."continuation"();
my $current = $stack."FETCH"();
bt_up:
 my $back = $current."back"();
 my $has_back = $back."true"();
 if $has_back { goto check_control } else { goto fail };
check_control:
 my $ctrl = $back."control"();
 my $has_ctrl = $ctrl."true"();
 if $has_ctrl { goto handle } else { goto redo_bt_up };
handle:
 my $outer = $back."back"();
 my $result = $ctrl."postcircumfix:( )"($capture, :"cc"($outer));
fail:
 my $void = $invocant."_not_caught"();
redo_bt_up:
 $current = $back."FETCH"();
 goto bt_up;
