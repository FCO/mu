<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="chrome://global/skin/" type="text/css"?><?xml-stylesheet href="takahashi.css" type="text/css"?><page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" id="presentation" xmlns:html="http:/www.w3.org/1999/xhtml" orient="vertical" onkeypress="Presentation.onKeyPress(event);"><html:textarea id="builtinCode" style="visibility: collapse">
Perl 6 for Perl 5 Programmers
{{#att|YAPC::EU 2009, Lisbon}}
{{#tag|by Martin Berends}}
----
{{#tag|»ö«}}
{{#att|»}}Motivation
{{#att|»}}RFC's  {{#att|»}}P6 is Perl
{{#att|»}}Specs  {{#att|»}}Implementations
{{#att|»}}Hard things possible  {{#att|»}}Community
{{#att|»}}Code
{{#att|»}}Perl 5 also profits
----
{{#tag|Motivation}}
{{#att|»}}(Perl 5)++, but...
{{#att|»}}core development too hard
{{#att|»}}(backward compatibility)--
{{#att|»}}module development too hard
{{#att|»}}(jumping through hoops)--
----
{{#tag|RFC process}}
{{#att|»}}Learn from the mistakes of P5
{{#att|»}}Make new mistakes this time!
{{#att|»}}361 RFC's @ dev.perl.org/perl6
{{#att|→}}Apocalypses{{#att|→}}Exegeses{{#att|→}}Synopses
----
{{#tag|Still Perl}}
 {{#att|»}}"It's Perl, Jim, but not as we know it"
 {{#att|»}}retains Perl and other idioms
 {{#att|»}}new, more powerful line noise ;-)
 {{#att|»}}all necessary breakage at once
 {{#att|»}}backward compatibility: use v5;
----
{{#tag|Specification}}
{{#att|»}}Apocalypses{{#att|→}}Exegeses{{#att|→}}Synopses
{{#att|»}}No "official" implementation
----
{{#tag|Implementation}}
 {{#att|»}}Parrot   {{#att|»}}Pugs
 {{#att|»}}Rakudo   {{#att|»}}STD.pm
 {{#att|»}}SMOP     {{#att|»}}Elf
 {{#att|»}}109 modules on CPAN
----
{{#tag|Hard things possible}}
{{#att|»}}Text parsing
{{#att|»}}Autothreading
{{#att|»}}Powerful OOP
{{#att|»}}Sublanguages
----
{{#tag|Community}}
{{#att|»}}dev.perl.org/perl6
{{#att|»}}#perl6 on irc.freenode.net
...
{{#att|»}}-Ofun
----
{{#tag|Show us the code!}}
 {{#att|1.}}unchanged
 {{#att|2.}}almost same
 {{#att|3.}}quite different
 {{#att|4.}}completely new
----
{{#tag|"... As We Know It"}}
 use Test;   # load a module
 plan 1;     # call a subroutine, pass a parameter
 my ( $x, $y ) = ( 5, 12 ); 
 my $r = sqrt( $x * $x + $y * $y);
 ok $r == 13, '5-12-13 triangle';
----
{{#tag|"... As We Know It (2)"}}
 sub leg {
    my ( $a, $b ) = @_;
    if   {{#att|(}}$a &lt;  $b{{#att|)}}{ return -1 }
    elsif{{#att|(}}$a == $b{{#att|)}}{ return  0 }
    else             { return  1 }
 }
----
{{#tag|"... As We Know It (3)"}}
 print "Subtotal = $subtotal\n";
 printf " = %7.2f\n", $amount;
 say "Total = $total";  # Perl 5.10
----
{{#tag|"... As We Know It (4)"}}
 unless{{#att|(}}condition{{#att|)}}{ do_something(); }
 while{{#att|(}}condition{{#att|)}}{ something_else(); }
 my $a = pop @arr;
----
{{#tag|"... As We Know It (5)"}}
 given $value {           # perl 5.10
    when 'R' { say 'red' }
    when 'G' { say 'green' }
    when 'B' { say 'blue' }
    default {  say 'unknown colour' }
 }
----
{{#tag|"... As We Know It (6)"}}
 while ( $x++ &lt; 10 ) { push @a, $x*$x; }
 for 1..10 { push @b, $_ * $_; }
----
{{#tag|...almost the same}}
 # P5 only
 my %h1 = ( 'a',   1, 'b',   2 );
 # P5 and P6
 my %h2 = ( 'a' => 1, 'b' => 2 );
----
{{#tag|Significant changes}}
----
{{#tag|Quoting huffmanized}}
 @days = &lt;Mon Tue Wed>;  # qw(Mon Tue Wed)
 %audience&lt;Mon> = 320;   # $audience{'Mon'}
----
{{#tag|Everything is an object}}
42.say;
say{{#tag|is the new print}}
{{#att|(because "\n" is so "hello, world")}}
----
{{#tag|operator changes}}
{{#att|->}} gets a new job in "pointy blocks"
object methods with {{#att|.}} instead of {{#att|->}}
String concatenation becomes {{#att|~}}
Pattern match becomes {{#att|~~}}
----
{{#tag|Sigils $ @ % more consistent}}
 my @score = 6, 4, 7; my $first = @score[0];
 my %age = 'tux' => 17; say %age{'tux'};
 say %age&lt;tux>;
----
{{#tag|No parens on flow control or lists}}
 {{#att|# Perl 6}}
 my @prime1 = 2, 3, 5, 7;
 if @prime1[1] &lt; @prime1[2] { say "prime1 ok"; }
 {{#att|# Perl 5}}
 my @prime2 = ( 2, 3, 5, 7 );
 if ( $prime2[1] &lt; $prime2[2] ) { print "prime2 ok\n"; }
----
{{#tag|new}}{{#att|loop}}{{#tag|keyword}}
 loop ( a; b; c ) { ... } # Perl 6
 #for ( a; b; c ) { ... } # no longer valid
 # space after 'loop' and ( ) mandatory
 # in Perl 6 the 'for' always iterates lists
----
{{#tag|new loop keyword}}
 loop ( my $i=1; $i&lt;=$n; $i++ ) { ... } # Perl 6
 for ( my $i=1; $i&lt;=$n; $i++ ) { ... }  # Perl 5
 {{#att|# but better would be}}
 for 1..$n -> $i   { mysub($i); }  # lazy "pointy block"
----
{{#tag|pointy block}}
 for 1..100 -> $odd, $even { ... }
 for %h.kv -> $k, $v { ... }
----
{{#tag|ternary operator changed}}
 $a ?? $b !! $c  {{#att|# not ::}}
 # the colon was urgently needed for adverbs, traits etc
----
{{#tag|Interpolation 1}}
say "score: $p points"; # like Perl 5
say "colours: @c";      # fails
say "colours: {@c}";    # ok
----
{{#tag|Interpolation 2}}
 sub hhmm {
   my $m = int( time / 60 ) % 60;
   my $h = int( time / 3600 ) % 24;
   sprintf( '%02d:%02d', $h, $m );
 }
 sub trace( $message ) { warn "{hhmm} $message"; }
----
{{#tag|parameter passing}}
 sub perimeter( $length, $width ) {
     return 2 * ( $length + $width );
 }
----
{{#tag|optional parameters}}
 sub perimeter( $length, $width? = 5 ) {
     return 2 * ( $length + $width );
 }
----
{{#tag|slurpy parameters}}
 sub myprintf( $format, *@data ) { ... }
----
{{#tag|OO design}}
 {{#att|»}}class, role, module, grammar as well as package
 {{#att|»}}keyword {{#att|new}} to create an instance of a class (object)
 {{#att|»}}keyword {{#att|does}} to inherit behaviour from a role
----
{{#tag|New P6isms in P5}}
 {{#att|»}}see {{#att|perldoc perldelta}} and {{#att|perldoc feature}} in v5.10
 {{#att|»}}say
 {{#att|»}}given / when
 {{#att|»}}state
 {{#att|»}}~~
----
{{#tag|»}}Pod v6
 =begin pod
 =head1 SYNOPSIS
 =end pod
 #{{#att|=pod}}and{{#att|=cut}}are gone
----
{{#tag|Completely new features}}
----
{{#tag|Twigils}}
{{#att|»}}new features could have used more sigils
{{#att|»}}rather have a "secondary sigil" - Twigil!
 {{#att|»}}@*INC and @*ARGS (globals)
 {{#att|»}}$.x (object member with accessor)
 {{#att|»}}$!x (object member without accessor)
----
{{#tag|Chaining operators}}
 if 100 &lt; $from &lt; $to &lt; 200 { ... }
----
{{#tag|Hyper Operators}}
 my @a = 4,5,6;    {{#att|# 4..6}}
 my @b = 11,12,13; {{#att|# 11..13}}
 my @c = @a »+« @b;
 {{#att|#  @c = @a >>+&lt;&lt; @b; # Texas}}
 @c.perl.say;  # [15, 17, 19]
----
{{#tag|Reduction Operators}}
 sub sum ( *@a ) { [+] @a }
 sub average ( *@a ) { ([+]@a) / @a.elems }
 sub fact ( $n ) { [*] 1..$n }
----
{{#tag|Junctions}}
 my $cool = "blue" | "green";
 my $warm = "red" | "orange" | "brown";
 my $color = prompt "Enter color : ";
 if $color eq $cool { "chilling out".say }
----
{{#tag|User defined operators}}
 sub infix:&lt;±> ($l, $r) {
     $l+$r | $l-$r
 }
 my $a = 5 ± 2;
 if $a == 3 { "HAZ 3 ".say } # true
 if $a == 7 { "HAZ 7 ".say } # also true
----
{{#tag|regexes}}
 regex date { \d**4 '-' \d**2 '-' \d**2 }
 rule daterange {from &lt;date> to &lt;date> }
 if $line ~~ / &lt;daterange> / { ... }
----
{{#tag|grammars}}
 grammar dslgrammar {
   regex TOP { ... &lt;daterange> ... }
   regex daterange { ... }
 }
 class dslaction { method TOP { ... }; method daterange { ... }; }
 dslgrammar.parse( $source, :action(dslaction.new) );
----
{{#tag|TODO}}
 {{#att|»}}Maintain your Perl 5 code, enhance with Perl 6 modules
 {{#att|»}}Learn the new language (tutorials, synopses)
 {{#att|»}}Use a Test Driven Development approach
 {{#att|»}}Initially rewrite small constructs (given/when ~~)
 {{#att|»}}Later take on larger changes (classes etc)
 {{#att|»}}Try Rakudo
 {{#att|»}}give feedback to, and get help from the community
----
{{#tag|SEE ALSO}}
rakudo.org - P6 on parrot
perlcabal.org/syn - synopses
perlgeek.de/perl6 - tutorial, IRC logs
perl6-projects.org - P6 developer activities
planetsix.perl.org - blog aggregator
perlfoundation.org/perl6 - wiki
----
</html:textarea>
<deck flex="1" id="deck"><vbox flex="1" onmousemove="Presentation.onMouseMoveOnCanvas(event);"><toolbox id="canvasToolbar"><toolbar><toolbarbutton oncommand="Presentation.home()" label="|&lt;&lt;" observes="canBack"/><toolbarbutton oncommand="Presentation.back()" label="&lt;" observes="canBack"/><toolbarbutton oncommand="Presentation.forward()" label="&gt;" observes="canForward"/><toolbarbutton oncommand="Presentation.end()" label="&gt;&gt;|" observes="canForward"/><toolbarseparator/><hbox align="center"><textbox id="current_page" size="4" oninput="if (this.value) Presentation.showPage(parseInt(this.value)-1);"/><description value="/"/><description id="max_page"/></hbox><toolbarseparator/><vbox flex="2"><spacer flex="1"/><scrollbar id="scroller" align="center" orient="horizontal" oncommand="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));" onclick="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));" onmousedown="Presentation.onScrollerDragStart();" onmousemove="Presentation.onScrollerDragMove();" onmouseup="Presentation.onScrollerDragDrop();"/><spacer flex="1"/></vbox><toolbarseparator/><spacer flex="1"/><toolbarseparator/><toolbarbutton id="toggleEva" label="Eva" type="checkbox" autoCheck="false" oncommand="Presentation.toggleEvaMode();"/><toolbarseparator/><toolbarbutton label="Edit" oncommand="Presentation.toggleEditMode();"/><toolbarbutton oncommand="Presentation.reload();" label="Reload"/></toolbar></toolbox><vbox flex="1" id="canvas" onclick="Presentation.onPresentationClick(event);"><spacer flex="1"/><hbox flex="1"><spacer flex="1"/><vbox id="content"/><spacer flex="1"/></hbox><spacer flex="1"/></vbox></vbox><vbox flex="1" id="edit"><toolbox><toolbar><toolbarbutton label="New Page" oncommand="Presentation.addPage()"/><spacer flex="1"/><toolbarseparator/><toolbarbutton label="View" oncommand="Presentation.toggleEditMode();"/><toolbarbutton oncommand="Presentation.reload();" label="Reload"/></toolbar></toolbox><textbox id="textField" flex="1" multiline="true" oninput="Presentation.onEdit()"/><hbox collapsed="true"><iframe id="dataLoader" onload="if (window.Presentation) Presentation.onDataLoad();"/></hbox></vbox></deck><broadcasterset><broadcaster id="canBack"/><broadcaster id="canForward"/></broadcasterset><commandset><command id="cmd_forward" oncommand="if (Presentation.isPresentationMode) Presentation.forward();"/><command id="cmd_back" oncommand="if (Presentation.isPresentationMode) Presentation.back();"/><command id="cmd_home" oncommand="if (Presentation.isPresentationMode) Presentation.home();"/><command id="cmd_end" oncommand="if (Presentation.isPresentationMode) Presentation.end();"/></commandset><keyset><key keycode="VK_ENTER"      command="cmd_forward"/><key keycode="VK_RETURN"     command="cmd_forward"/><key keycode="VK_PAGE_DOWN"  command="cmd_forward"/><key keycode="VK_RIGHT"      command="cmd_forward"/><key keycode="VK_DOWN"       command="cmd_forward"/><!--key keycode="VK_BACK_SPACE" command="cmd_back"/--><key keycode="VK_PAGE_UP"    command="cmd_back"/><!--<key keycode="VK_BACK_UP"    command="cmd_back"/>--><!--<key keycode="VK_BACK_LEFT"  command="cmd_back"/>--><key keycode="VK_HOME"       command="cmd_home"/><key keycode="VK_END"        command="cmd_end"/><key key="n" modifiers="accel" oncommand="Presentation.addPage();"/><key key="r" modifiers="accel" oncommand="window.location.reload();"/><key key="e" modifiers="accel" oncommand="Presentation.toggleEditMode();"/><key key="a" modifiers="accel" oncommand="Presentation.toggleEvaMode();"/></keyset><script src="takahashi.js" type="application/x-javascript" /></page>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Takahashi-Method-based Presentation Tool in XUL.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - ***** END LICENSE BLOCK ***** -->
