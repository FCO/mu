elfparse - getting STD.pm running on elf.

QUICKSTART

First, get <pugs>/misc/STD_red working.  See its README.

$ sudo cpan -i autobox Class::Multimethods Sub::Name  Regexp::Common
$ sudo cpan -i Moose Term::ANSIColor  #...others...?
$ make known_working_STD
$ make elfblue
$ ./elfblue -v -s -e 'say 3'
$ make check
$ make all
$ ./elfrx -v -e 'proto token foo {a}; token foo:<+> { \+ }; token foo:<++> { \+\+ }; say /<foo>/.match("a++b").match_describe'
$ make is_perl_recent_enough
$ ./elfdev -v -e 'say /<STD::number>/.match("23").match_describe'

$ make does_gimme5_memory_problem_still_exist

INTRODUCTION

Parser
------

Elf currently uses an external parser, of which there are several.

STD_red
The fast and stable parser used by elf_h.
It is handwritten ruby1.9, based on a rather old STD.pm.
<pugs>/misc/STD_red/

STD_blue
The reference and bootstrap parser used by elfblue and elfrx.
It uses Larry's Perl 5 src/perl6/gimme5 STD.pmc.
Its parse tree is different than STD_red's (thus ./IRx1_FromAST2.pm),
and closer to what elf will have when it can run STD.pm directly.
STD_blue/elfblue works well enough to self-compile elfblue.

STD_green
The development parser.
It uses std.pm (a tweaked STD.pm) on elfrx (elfblue plus rx engine).
Its parse tree is similar to STD_blue's (so elfblue and elfrx may use it).
It can't parse even "3" yet.  

Compiler
--------

There are several versions of elf.

elf_h is the foundational elf.  It uses STD_red.

elfblue is a (tweaked) elf_h which uses STD_blue instead of STD_red.
Purpose: keep STD_blue elf working.

elfrx is like elfblue, but also has regex support.
Purpose: regex development.

elfdev is elfrx with std.pm preloaded.
Purpose: std.pm debugging.


VISION

Teach elfrx to to compile and run STD.pm.
Thus permitting the front-end to be bootstrapped.


NOTES

Dependencies:
autobox Class::Multimethods Sub::Name #elf
Regexp::Common #rx_on_re
Moose #gimme5

gimme5, and thus STD_blue, is not quite ready to replace STD_red as
the primary elf parser.
 Speed has greatly improved - is it comparable yet?
 Memory usage on encountering foofix:<bar> decls is a non-starter?
  (but... could :sym<>-ify elf?).
 elf IRFromAST2 support for STD_blue's AST needs work.
 If running STD.pm using rx_on_re in elf works out, then switching isn't
  critical path.  But if it bogs down, that may change..

PrimitivesP5.pm is a tweaked copy of elf_h's - gimme5 takes more memory
than I have available to compile the original.

IRx1_FromAST2_create.pl is a mess, with an unfortunate quantity of broken
legacy code.  The only objective was "get to self compilation", so general
p6 support is lacking, even by elf standards.


make check  runtime:
r24098 takes me 9m35s'user (with STD_red cached, and STD_blue not cached).

Success looks like:
- STD_blue can parse STD.pm.
- elfblue can generate IR for STD.pm.
- an elf can run the non-rx portions of STD.pm.
- rx_on_re can run the rx portions of STD.pm.
- rx_on_re is integrated into an elf.
- an elf can run STD.pm
- an elf can self-compile using STD.pm.


DEV NOTES

Todo:
 - <noun> <?na>?  bug
   ./elfdev -e 'package STD{rule bug {<noun><?fake>?};say /<bug>/.match("3").match_describe}'
 - extract '3;' parser rules into isolated and more easily recompiled file.
 - profile.
 - explore speed and space.
  - is <.-ness propagated?
    **properly propagate-stopped when there are code blocks?
  - re aggregation.
  - acceptors and/or inter-regex inlining.
  - inline tok subs ala STD_red
 - create elfrx "keep the optimizations unbugged" infrastructure.

 - let elfdev eval6 code.
   requires pulling in code from STD_green.
    lib? $0 ~~ __FILE__ ?  gimme_elf's hack?

 - EXPR

Implementation problems:
 - Missing .Bool in fastpath boolean ops.
   elf_h -v -e 'if 3 && 4 { }'
   if(((3 && 4))->Bool) {}
   So still don't know full cost of .Bool-ification.


# since we're not faking $Â¢ yet.
package Undef {
  method panic($msg) is p5 {'
my $str = $Regexp::ModuleA::ReentrantEngine::Env::str;
my $pos = $Regexp::ModuleA::ReentrantEngine::Env::pos;
my $m1 = $Regexp::ModuleA::ReentrantEngine::Env::current_match;
my $m2 = $Regexp::ModuleA::ReentrantEngine::Env::leaf_match;
my $m3 = $Regexp::ModuleA::ReentrantEngine::Env::alias_match;
my $pkg = $Regexp::ModuleA::ReentrantEngine::Env::pkg;
my $data = $Regexp::ModuleA::ReentrantEngine::Env::nested_data;
print STDERR $msg,"\n";
print STDERR "pos: ",$pos,"\n";
Carp::croak if $ENV{VERBOSE};
exit(1);
'}
}

# fast pseudo <ws>
_inline_p5('
my $wsre = q{(?:(?<!\w)|(?!=\w))\s*|\s+};
print STDERR $wsx,"\n";;
IRx1::RxBaseClass->RMARE_biind(__PACKAGE__,"ws",IRx1::RxBaseClass->RMARE_aregex2(undef,"ws",IRx1::RxBaseClass->RMARE_aregex_create(IRx1::RxBaseClass->RMARE_eat_regexp($wsre),undef),undef,undef));
');

# cumulative time
use Time::HiRes qw();
{package IRx1::RxBaseClass;
 our $stats = {};
 sub RMARE_aregex2 {
   my($cls,@args)=@_;
   my $name = $args[1];
   my $f0 = $args[2];
   my $noop = $cls->RMARE_noop;
   my $f = Sub::Name::subname "time regex" => sub {
     my($c)=@_;
     my $t0 = [Time::HiRes::gettimeofday];
     my $t1 = undef;
     my $stop_timer = Sub::Name::subname "bar" => sub {
       my($c2)=@_;
       $t1 = [Time::HiRes::gettimeofday];
       $c->($c2);
     };
     my $v = $f0->($stop_timer);
     my $te = Time::HiRes::tv_interval($t0,$t1);
     $stats->{$name}[0]++;
     $stats->{$name}[1] += $te;  
     return $v;
   };
   $args[2] = $f;
   $cls->RMARE_aregex(@args);
 }
}
_inline_p5('
{
 my $x = $IRx1::RxBaseClass::stats;
 my @k = keys(%$x);
 @k = sort { $x->{$a}[1] <=> $x->{$b}[1] } @k;
 for my $k (@k) { print $x->{$k}[1],"\t",$x->{$k}[0],"\t",$k,"\n"; }
}
');

2009-Feb-15 :)
./elfdev -e 'package STD{regex EXPR{<termish>}; say /<comp_unit>/.match("3").match_describe}'
