%prefix smop_s1p_pureprototypehow
%singleton SMOP__S1P__PurePrototypeHow
%RI.id PurePrototypeHOW

%method dispatch
    SMOP__Object* actualcapture = SMOP__NATIVE__capture_positional(interpreter,capture,2);
    SMOP__Object* actualidentifier = SMOP__NATIVE__capture_positional(interpreter,capture,1);
    SMOP__Object* actualinvocant = SMOP__NATIVE__capture_invocant(interpreter,actualcapture);
    SMOP__Object* actualresponder = SMOP__NATIVE__capture_positional(interpreter,capture,0);
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation, 
                                               SMOP_REFERENCE(interpreter,interpreter));
    SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,
                                                   SMOP_REFERENCE(interpreter,
                                                                  smop_s1p_pureprototypehow_dispatch_mold));
    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,actualresponder);
    mold_reg_set(interpreter,frame,2,actualidentifier);
    mold_reg_set(interpreter,frame,3,actualcapture);
    mold_reg_set(interpreter,frame,4,actualinvocant);
    mold_back_set(interpreter,frame,continuation);
    SMOP_DISPATCH(interpreter,SMOP_RI(interpreter),SMOP__ID__goto,frame);

%method add_method
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation, 
                                               SMOP_REFERENCE(interpreter,interpreter));
    SMOP__Object* frame = SMOP__Mold__Frame_create(interpreter,
                                                   SMOP_REFERENCE(interpreter,
                                                                  smop_s1p_pureprototypehow_add_method_mold));
    mold_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    mold_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    mold_back_set(interpreter,frame,continuation);
    SMOP_DISPATCH(interpreter,SMOP_RI(interpreter),SMOP__ID__goto,frame);

%method FETCH
    ___VALUE_FETCH___;

%method lookup_fail
    SMOP__Object* actualcapture = SMOP__NATIVE__capture_positional(interpreter,capture,2);
    SMOP__Object* actualidentifier = SMOP__NATIVE__capture_positional(interpreter,capture,1);
    SMOP__Object* actualinvocant = SMOP__NATIVE__capture_invocant(interpreter,actualcapture);

    if (actualidentifier == SMOP__ID__FETCH) {
      ret = actualinvocant;
      SMOP_RELEASE(interpreter,actualidentifier);
      SMOP_RELEASE(interpreter,actualcapture);

    } else if (actualidentifier == SMOP__ID__dispatch) {
      SMOP__Object* actual_actualidentifier = SMOP__NATIVE__capture_positional(interpreter,actualcapture,1);

      if (actual_actualidentifier == SMOP__ID__FETCH) {
        SMOP__Object* actual_actualcapture = SMOP__NATIVE__capture_positional(interpreter,actualcapture,2);
        SMOP__Object* actual_actualinvocant = SMOP__NATIVE__capture_invocant(interpreter,actual_actualcapture);

        ret = actual_actualinvocant;
        SMOP_RELEASE(interpreter,actual_actualidentifier);
        SMOP_RELEASE(interpreter,actual_actualcapture);
        SMOP_RELEASE(interpreter,actualinvocant);
        SMOP_RELEASE(interpreter,actualidentifier);
        SMOP_RELEASE(interpreter,actualcapture);

      } else {
        assert(actualidentifier->RI == SMOP__ID__new->RI);
        int retsize;
        fprintf(stderr,"Could not find method %s.\n",SMOP__NATIVE__idconst_fetch(actualidentifier, &retsize));
        abort();
      }

    } else {
      assert(actualidentifier->RI == SMOP__ID__new->RI);
      int retsize;
      fprintf(stderr,"Could not find method %s.\n",SMOP__NATIVE__idconst_fetch(actualidentifier, &retsize));
      abort();

    }

%mold smop_s1p_pureprototypehow_dispatch_mold
    my $interpreter;
    my $responder;
    my $identifier;
    my $capture;
    my $invocant;

    my $void;
    my $result = ¢SMOP__NATIVE__bool_false;

    my $methods = $invocant."^!methods"();
    my $method_exists = $methods."exists"($identifier);

    if $method_exists { goto than } else { goto fail };
    than:
      my $method_container = $methods."postcircumfix:{ }"($identifier);
      my $method = $method_container."FETCH"();
      $result = $method."postcircumfix:( )"($capture);
      goto exit;
    fail:
      my $how_c = $invocant."^!how"();
      my $how = $how_c."FETCH"();
      $result = $how."lookup_fail"($responder, $identifier, $capture);
    exit:
    my $continuation = $interpreter."continuation"();
    my $back = $continuation."back"();
    $void = $back."setr"($result);
    $void = $interpreter."goto"($back);

%mold smop_s1p_pureprototypehow_add_method_mold
    my $interpreter;
    my $capture;

    my $void;
    my $result = ¢SMOP__NATIVE__bool_false;

    my $invocant = $capture."positional"(0);
    my $name = $capture."positional"(1);
    my $method = $capture."positional"(2);

    my $methods = $invocant."^!methods"();
    my $method_container = $methods."postcircumfix:{ }"($name);
    $void = $method_container."STORE"($method);

    my $continuation = $interpreter."continuation"();
    my $back = $continuation."back"();
    $void = $interpreter."goto"($back);
