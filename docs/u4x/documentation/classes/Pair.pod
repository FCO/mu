=head1 Pair

Consists of two parts, a I<key> and a I<value>. C<Pair>s can be seen as the
atomic units in C<Hash>es, and they are also used in conjunction with named
arguments and parameters.

There are two syntaxes for C<Pair>s:

    'key' => 'value'    # this...
    :key<value>         # ...means the same as this

=head2 Methods

=head3 key

Gives the I<key> part of the C<Pair>.

=head3 value

Gives the I<value> part of the C<Pair>.

=head3 cmp

The type-agnostic comparator; compares two C<Pair>s. Compares first their
I<key> parts, and then (if the first comparison yielded 0) the I<value> parts.

=head3 fmt

Takes a I<format string>, and returns a string the I<key> and I<value>
parts of the C<Pair> formatted. Here's an example:

    my $pair = :Earth(1);
    say $pair.fmt("%s is %.3f AU away from the sun")
    # Prints "Earth is 1.000 AU away from the sun"

For more about format strings, see X<sprintf>.

=head3 item

Returns the C<Pair> in I<item context>. A C<Pair> is already in item
context, so this method returns the C<Pair> unchanged.

=head3 kv

Returns a two-element C<List> with the I<key> and I<value> parts of the
C<Pair>, in that order. This method is a special case of the same-named
method on C<Hash>, which returns all its entries as a list of keys and
values.

=head3 pairs

Returns a list of one C<Pair>, namely this one.

=head3 perl

Returns a Perl representation of the C<Pair>, a C<Str> of Perl code which, if
evaluated, would generate this C<Pair> as a result. The exact representation
may vary between Perl 6 implementations, but in general, it will look
something like this:

    say (1 => 2).perl       # prints '1 => 2'
