#!/usr/bin/perl
use v5.10;
use strict;
use warnings;
use Time::HiRes qw(time);
use IPC::Open3;
use File::Temp qw(tempfile);
use Symbol;

sub compile {
  my ($code) = @_;
  my ($fh, $filename) = tempfile();
  my ($wtr, $rdr, $err) = map { gensym } 1..3;
  open3($wtr, $rdr, $err, '/usr/bin/env', 'perl', 'mildew', '-o', $filename) || die $!;
  print $wtr $code;
  close $wtr;
  <$rdr>;
  <$err>;
  return $filename;
}

sub run {
    my ($file,) = @_;
    $::ENV{LD_LIBRARY_PATH} = 'lib:CORE:../re-smop/build/lib';
    my ($wtr, $rdr, $err) = map { gensym } 1..3;
    open3($wtr,$rdr,$err,$file);
    close $wtr;
    <$rdr>;
    <$err>;
    # TODO validate TAP
}
my %benchmarks = (
    empty => sub {
        '$OUT.print("1..1","\n","ok 1")';
    },
    multidef => sub {
        my ($size,) = @_;
        my $code = "say '1..1';\n";
        $code .= "multi foo0() {0}\n";
        for (1..$size) {
            $code .= "multi foo$_() {1+foo".($_-1)."}\n";
        }
        $code;
    }
);
my $size = $ARGV[0] // 5;
my $test = $ARGV[1];
say "test size $size";
if (defined $test) {
    my $before = time;
    my $file = compile($benchmarks{$test}->($size));
    my $after = time;
    say "compiling $test took ",$after-$before;
    $before = time;
    run($file);
    $after = time;
    say "$test took ",$after-$before;
} else {
    while (my ($name,$body) = each %benchmarks) {
        my $before = time;
        my $file = compile($body->($size));
        my $after = time;
        my $compile_time = $after-$before;
        $before = time;
        run($file);
        $after = time;
        say "$name compilation:",$compile_time, " execution: ",$after-$before;
    }
}

