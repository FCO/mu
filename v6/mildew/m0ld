#!/usr/bin/perl
use v5.10;
use strict;
use warnings;
use Regexp::Grammars;
use Regexp::Common;
use lib 'src';
use AST;
use Data::Dumper::Concise;
my $parser = qr {
<top>
<rule: top>
(?:<[stmt]> ;)*
(?{ $MATCH = AST::Block->new(stmts=>$MATCH{stmt}) })
<token: stmt>
(?: <MATCH=goto>|<MATCH=br>|<MATCH=assign>)
<rule: call>
<identifier=value> \. <invocant=value> 
\(
<[argument]> ** ,
\)
(?{ $MATCH = AST::Call->new(
    identifier=>$MATCH{identifier},
    capture=>AST::Capture->new(
        invocant=>$MATCH{invocant},
        positional=>$MATCH{argument},
        named=>[]
    )
)})
<rule: assign>
<register> = <rvalue>
(?{ $MATCH = AST::Assign->new(lvalue=>$MATCH{register},rvalue=>$MATCH{rvalue}) })
<token: rvalue>
<MATCH=call> | <MATCH=value>

<token: goto>
goto \s+ <label>
<token: argument>
(?: <named_argument> | <MATCH=value> )
<rule: named_argument>
(?: \: <value> \( <value> \) )
<token: noop>
noop

<rule: br>
if <value> <branch> else <branch>

<rule: branch>
\{ goto <label> ;? \}

<token: label>
\w+

<token: value>
(?: <MATCH=integer>  | <MATCH=register> | <MATCH=string> )
<token: integer>
(\d+)
(?{$MATCH = AST::IntegerConstant->new(value=>$+)})
<token: register>
(\$ \p{IsAlpha} \w*)
(?{$MATCH = AST::Reg->new(name=>$+)})
<token: string>
" ((?:\.|[^\\"])*) "
(?{$MATCH = AST::StringConstant->new(value=>$+)})
}x;
'$foo = 1."foo"(1,2,3);' =~ $parser;
say $/{top}->pretty;

