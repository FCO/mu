elfparse - getting STD.pm running on elf.
Aka: the unfinished elf front-end (rx engine and STD.pm parser) bootstrap.

QUICKSTART

First, get <pugs>/misc/STD_red working.  See its README.

$ sudo cpan -i YAML::Syck autobox Class::Multimethods Sub::Name  Regexp::Common
$ sudo cpan -i Moose Term::ANSIColor YAML::Syck Class::Inspector  #...others...?
$ make elfblue
$ ./elfblue -v -s -e 'say 3'
$ make check
$ make all
$ ./elfrx -v -e 'proto token foo {a}; token foo:<+> { \+ }; token foo:<++> { \+\+ }; say /<foo>/.match("a++b").match_describe'
$ make is_perl_recent_enough
$ ./elfdev -v -e 'package STD { say /<comp_unit>/.match("23").match_describe }'
$ ./elfdev -v -r1 -e 'say 3'

$ make does_gimme5_memory_problem_still_exist

INTRODUCTION

Parser
------

Elf currently uses an external parser, of which there are several.

STD_red
The fast and stable parser used by elf_h.
It is handwritten ruby1.9, based on a rather old STD.pm.
<pugs>/misc/STD_red/

STD_blue
The reference and bootstrap parser used by elfblue and elfrx.
It uses Larry's Perl 5 src/perl6/gimme5 STD.pmc.
Its parse tree is different than STD_red's (thus ./IRx1_FromAST2.pm),
and closer to what elf will have when it can run STD.pm directly.
STD_blue/elfblue works well enough to self-compile elfblue.

STD_green
The development parser.
It uses std.pm (a tweaked STD.pm) on elfrx (elfblue plus rx engine).
Its parse tree is similar to STD_blue's (so elfblue and elfrx may use it).
It can't parse even "3" yet.  

Compiler
--------

There are several versions of elf.

elf_h is the foundational elf.  It uses STD_red.

elfblue is a (tweaked) elf_h which uses STD_blue instead of STD_red.
Purpose: keep STD_blue elf working.

elfrx is like elfblue, but also has regex support.
Purpose: regex development.

elfdev is elfrx with std.pm preloaded.
Purpose: std.pm debugging.


VISION

Teach elfrx to to compile and run STD.pm.
Thus permitting the front-end to be bootstrapped.


NOTES

Dependencies:
 autobox Class::Multimethods Sub::Name   #for elf
 Regexp::Common   #for rx_on_re tests
 Moose   #for gimme5

Running  make check_std_rx_on_re  takes a loonngg time.
Caching the STD_blue parses of the rx test suite speeds it.
So you probably want to:
  $ make check_std_rx_on_re
  $ mkdir whatever; cp -p deleteme_cache_blue/* whatever/
And on subsequent runs,
if the cache is still loaded:
  $ make rerun_std_rx_on_re
and when the cache has been wiped:
  $ make check_std_rx_on_re &
  $ cp whatever/* deleteme_cache_blue/
  $ fg
But if you've changed pugs_src_perl6/STD.pm or gimme5,
then you *want* to discard all your old parses.
- 2009-Mar-18

gimme5, and thus STD_blue, is not quite ready to replace STD_red as
the primary elf parser.
 Speed has greatly improved - is it comparable yet?
 Memory usage on encountering foofix:<bar> decls is a non-starter?
  (but... could :sym<>-ify elf?).
 elf IRFromAST2 support for STD_blue's AST needs work.
 If running STD.pm using rx_on_re in elf works out, then switching isn't
  critical path.  But if it bogs down, that may change..

PrimitivesP5.pm is a tweaked copy of elf_h's - gimme5 takes more memory
than I have available to compile the original.

Success looks like:
 - elf can compile all of std.pm (not necessarily correctly).
 - elf can self-compile using std.pm on rx_on_re.


Todo:

 - bug: ./elfrx -v -e 'token foo { $<sym>=(a) }'
   analysis capture miscounting, creating a bogus $0.
 - create elfrx "keep the optimizations unbugged" infrastructure.

 - unpodding std.pm, extending parser coverage.


#For timing:
# In std.pm.p5 and rx_prelude_p5.pm,
#  s///g IRx1::RxBaseClass->RMARE_aregex( to IRx1::RxBaseClass->RMARE_aregex2(
# then add this to the top of rx_prelude_p5.pm:
# cumulative time
use Time::HiRes qw();
{package IRx1::RxBaseClass;
 our $stats = {};
 sub RMARE_aregex2 {
   my($cls,@args)=@_;
   my $name = $args[1];
   my $f0 = $args[2];
   my $noop = $cls->RMARE_noop;
   my $f = Sub::Name::subname "time regex" => sub {
     my($c)=@_;
     my $t0 = [Time::HiRes::gettimeofday];
     my $t1 = undef;
     my $stop_timer = Sub::Name::subname "bar" => sub {
       my($c2)=@_;
       $t1 = [Time::HiRes::gettimeofday];
       $c->($c2);
     };
     my $v = $f0->($stop_timer);
     my $te = Time::HiRes::tv_interval($t0,$t1);
     $stats->{$name}[0]++;
     $stats->{$name}[1] += $te;  
     return $v;
   };
   $args[2] = $f;
   $cls->RMARE_aregex(@args);
 }
}
# And this in your test file.
_inline_p5('
{
 my $x = $IRx1::RxBaseClass::stats;
 my @k = keys(%$x);
 @k = sort { $x->{$a}[1] <=> $x->{$b}[1] } @k;
 for my $k (@k) { print $x->{$k}[1],"\t",$x->{$k}[0],"\t",$k,"\n"; }
}
');
